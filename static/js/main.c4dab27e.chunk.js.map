{"version":3,"sources":["components/ContactForm/Input/Input.js","redux/contacts-types.js","redux/contacts-actions.js","components/ContactForm/ContactForm.js","components/ContactList/Contact/Contact.js","components/ContactList/ContactList.js","App.js","redux/contacts-reducer.js","redux/store.js","index.js"],"names":["Input","label","type","name","value","onChange","addContact","createAction","types","number","payload","id","uuidv4","deleteContact","filterContact","ContactForm","contacts","useSelector","state","items","dispatch","useDispatch","useState","setName","setNumber","onSubmit","e","preventDefault","trim","normalizedName","toLowerCase","find","toast","error","contactsAction","autoComplete","target","children","Contact","contact","onDelete","onClick","ContactsList","visibleContacts","filter","normalizedFilter","item","includes","map","App","autoClose","itemsReducer","createReducer","actions","action","filterReducer","_","combineReducers","persistConfig","key","storage","blacklist","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","rootReduscer","persistReducer","contactsReducer","store","configureStore","reducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.c4dab27e.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\n\r\nexport default function Input({label, type, name, value, onChange}) {\r\n    return (\r\n    <label> {label}\r\n        <input type={type} name={name} value={value} onChange={onChange}/>\r\n    </label>\r\n    )\r\n}\r\n\r\nInput.propTypes = {\r\n    label: PropTypes.string.isRequired,\r\n    type: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    value: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func.isRequired,\r\n}","// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default {\r\n    ADD: 'contacts/add',\r\n    DELETE: 'contacts/delete',\r\n    CHANGE_FILTER: 'contacts/changeFilter',\r\n    FILTRATION_CONTACTS: 'contacts/filtrationContacts',\r\n}","import types from './contacts-types'\r\nimport { createAction } from '@reduxjs/toolkit';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\n// const addContact = (name, number) => ({\r\n//     type: types.ADD,\r\n//     payload: {\r\n//         id: uuidv4(),\r\n//         name,\r\n//         number,\r\n//     }\r\n// })\r\n\r\n// const deleteContact = (id) => ({\r\n    // type: types.DELETE,\r\n    // payload: id,\r\n// })\r\n\r\n// const filterContact = (value) => ({\r\n//     type: types.CHANGE_FILTER,\r\n//     payload: value\r\n// })\r\n\r\nconst addContact = createAction(types.ADD, (name, number) => ({payload: {\r\n        id: uuidv4(),\r\n        name,\r\n        number,\r\n}\r\n}))\r\n\r\nconst deleteContact = createAction(types.DELETE)\r\nconst filterContact = createAction(types.CHANGE_FILTER)\r\n\r\nexport default { addContact,  deleteContact, filterContact };","// import React, { Component } from 'react';\r\nimport {useState} from 'react';\r\nimport { useSelector, useDispatch} from 'react-redux'\r\nimport { toast } from  'react-toastify';\r\n\r\nimport Input from './Input/Input';\r\nimport contactsAction from '../../redux/contacts-actions';\r\n\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nexport default function ContactForm() {\r\n\r\n    const contacts = useSelector((state) => state.contacts.items);\r\n    const dispatch = useDispatch();\r\n\r\n    const [name, setName] = useState('')\r\n    const [number, setNumber] = useState('')\r\n\r\n    function handleNameChange (e) {\r\n        const value = e.target.value;\r\n        setName(value);\r\n    }\r\n\r\n    function handleNamberChange (e) {\r\n        const value = e.target.value;\r\n        setNumber(value);\r\n    }\r\n\r\n    function handleSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        if (name.trim() === '' || number.trim() === '') {\r\n            toast.error('Заполните поле');\r\n            return\r\n        }\r\n\r\n        const normalizedName = name.toLowerCase();\r\n        const hasContact = contacts.find(({name}) => name.toLowerCase() === normalizedName);\r\n        \r\n        if(hasContact) {\r\n            toast.error(`Контакт с именем ${name} уже существует`)\r\n            return\r\n        }\r\n\r\n        dispatch(contactsAction.addContact(name, number))\r\n        reset();\r\n    }\r\n\r\n    function reset () {\r\n        setName('');\r\n        setNumber('');\r\n    }\r\n\r\n    return (\r\n        <form key='AddContactForm' onSubmit={handleSubmit} autoComplete=\"off\">\r\n            <Input label=\"Name\" type=\"text\" name=\"name\" value={name} onChange={handleNameChange} />\r\n            <Input label=\"Number\" type=\"text\" name=\"number\" value={number} onChange={handleNamberChange} />\r\n            <button type='submit'  children='Add contact'></button>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//     addContact: (name, number) => dispatch(contactsAction.addContact(name, number))\r\n// })\r\n\r\n// export default connect(null, mapDispatchToProps)(ContactForm);\r\n\r\n\r\n","import PropTypes from 'prop-types';\r\n\r\nexport default function Contact({ contact, onDelete }) {\r\n\r\n        return (\r\n            <li>\r\n                <p>{contact.name} {contact.number}</p> \r\n                <button id={contact.id} onClick={onDelete}>Delete</button>\r\n            </li>          \r\n        )   \r\n}\r\n\r\nContact.propTypes = {\r\n    contact: PropTypes.object.isRequired,\r\n    onDelete: PropTypes.func.isRequired,\r\n}","import { useSelector, useDispatch} from 'react-redux'\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Contact from \"./Contact/Contact\";\r\nimport contactsAction from '../../redux/contacts-actions';\r\n\r\nexport default function ContactsList() {\r\n\r\n    const visibleContacts = useSelector((state) => {\r\n        const { filter, items } = state.contacts;\r\n        const normalizedFilter = filter.toLowerCase();\r\n    \r\n        return  items.filter(item => item.name.toLowerCase().includes(normalizedFilter))\r\n    });\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <ul>\r\n            {visibleContacts.map(contact => (<Contact key={contact.id} contact={contact} onDelete={() => dispatch(contactsAction.deleteContact(contact.id))}/>))}\r\n      </ul>\r\n    )\r\n}\r\n\r\n// const mapStateToProps = (state) => {\r\n//     const { filter, items } = state.contacts;\r\n//     const normalizedFilter = filter.toLowerCase();\r\n\r\n//     return {visibleContacts: items.filter(item => item.name.toLowerCase().includes(normalizedFilter))}\r\n// }\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//     onDelete: id => dispatch(contactsAction.deleteContact(id))\r\n// })\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactsList)\r\n\r\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ToastContainer } from  'react-toastify';\n\nimport ContactForm from './components/ContactForm/ContactForm';\nimport Filter from \"./components/ContactForm/Input/Input\";\nimport ContactList from \"./components/ContactList/ContactList\";\n\nimport contactsAction from './redux/contacts-actions';\n\nexport default function App(){\n\n  const value = useSelector((state) => state.contacts.filter)\n  const dispatch = useDispatch();\n\n      return (\n        <>\n            <ContactForm />\n\n            <h2>Contacts</h2>\n            <Filter label=\"Find contacts by name\" value={value} type=\"text\" name=\"filter\"  onChange={(e) => dispatch(contactsAction.filterContact(e.target.value))}/>\n\n          <ContactList />\n          <ToastContainer autoClose={2500}/>\n        </>\n    )\n  }\n  \n\n\n// const mapStateToProps = (state) => ({\n//   value: state.contacts.value,\n// })\n\n// const mapDispatchToProps = dispatch => ({\n//   filterChange: (e) =>  dispatch(contactsAction.filterContact(e.target.value))\n// })\n\n// export default connect(mapStateToProps, mapDispatchToProps)(App)\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\n\r\nimport actions from './contacts-actions';\r\n\r\n// import types from './contacts-types'\r\n\r\n// const itemsReducer = (state = [], {type, payload}) => {\r\n\r\n//     switch (type) {  \r\n//         case types.ADD:\r\n//             return [...state, payload];\r\n\r\n//         case types.DELETE:\r\n//             return state.filter(contact => contact.id !== payload)\r\n        \r\n//         default:\r\n//             return state\r\n\r\n//     }\r\n\r\n// }\r\n\r\n// const filterReducer = (state = '', { type, payload }) => {\r\n//     switch (type) {\r\n//         case types.CHANGE_FILTER:\r\n//             return payload\r\n           \r\n//         default:\r\n//            return state\r\n//     }\r\n// }\r\n\r\nconst itemsReducer = createReducer([], {\r\n    [actions.addContact]: (state, action) => [...state, action.payload],\r\n    [actions.deleteContact]: (state, action) => state.filter(contact => contact.id !== action.payload),\r\n})\r\n\r\nconst filterReducer = createReducer('', {\r\n    [actions.filterContact]: (_, action) => action.payload\r\n})\r\n\r\nexport default combineReducers({\r\n   items: itemsReducer,\r\n   filter: filterReducer,\r\n})\r\n\r\n","import { combineReducers } from 'redux';\r\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport { \r\n  persistStore, \r\n  persistReducer, \r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER } from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage'\r\nimport logger from 'redux-logger'\r\n// import { composeWithDevTools } from 'redux-devtools-extension';   \r\n\r\nimport contactsReducer from './contacts-reducer';\r\n\r\nconst initialState = {\r\n   contacts: {\r\n    items: [],\r\n    filter: ''\r\n  }\r\n};\r\n\r\n// const rootReduscer = combineReducers({\r\n//    contacts: contactsReducer,\r\n// })\r\n\r\n// const store = createStore(rootReduscer, composeWithDevTools());\r\n\r\nconst persistConfig = {\r\n  key: 'root',\r\n  storage,\r\n  blacklist: ['filter'],\r\n}\r\n\r\nconst middleware = [...getDefaultMiddleware({\r\n  serializableCheck: {\r\n    ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER]\r\n  }\r\n}), logger];\r\n\r\nconst rootReduscer = combineReducers({\r\n      contacts: persistReducer(persistConfig, contactsReducer)\r\n})\r\n\r\n\r\nconst store = configureStore({\r\n   reducer: rootReduscer,\r\n   devTools: process.env.NODE_ENV === 'development',\r\n   middleware,\r\n})\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport default {persistor, store};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport { PersistGate } from 'redux-persist/integration/react'\n\n\nimport App from './App';\nimport store from './redux/store';\n \nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate  loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>  \n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}